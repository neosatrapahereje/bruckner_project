#!/usr/bin/env python
import argparse
import glob
import logging
import time
import os

import matplotlib
matplotlib.use('agg')
import numpy as np

import matplotlib.pyplot as plt

from alignment.dtw import dtw_alignment, DEFAULT_DTW_KWARGS
from alignment.features import extract_features

logging.basicConfig(level=logging.INFO)
LOGGER = logging.getLogger(__name__)

def _perf_name(fn):
    """Gets name of the piece, replaces spaces with '_' and removes extension
    """
    return os.path.basename(fn).replace(' ', '_').replace('.flac', '')

def main(performance_fn, reference_fn, out_dir,
         make_plots=True,
         dtw_kwargs=DEFAULT_DTW_KWARGS):
    """
    Perform an alignment
    """
    LOGGER.info('Exctracting features from performance')
    perf_features, perf_times = extract_features(performance_fn, features='mfcc')
    LOGGER.info('Extracting features from reference')
    ref_features, ref_times = extract_features(reference_fn, features='mfcc')

    if make_plots:
        LOGGER.info('Plotting features')
        fig, axes = plt.subplots(2)

        pxticks = np.arange(0, len(perf_features), len(perf_features) // 10)
        pxtick_labels = ['{0:.0f}'.format(np.round(pt / 60)) for pt in perf_times[pxticks]]
        rxticks = np.arange(0, len(ref_features), len(ref_features) // 10)
        rxtick_labels = ['{0:.0f}'.format(np.round(pt / 60)) for pt in ref_times[rxticks]]

        axes[0].imshow(perf_features.T, aspect='auto',
                       interpolation='nearest',
                       origin='lowest')
        # axes[0].set_xlabel('Time (minutes)')
        axes[0].set_title(_perf_name(performance_fn))
        axes[0].set_ylabel('Features')
        axes[0].set_xticks(pxticks)
        axes[0].set_xticklabels(pxtick_labels)
        axes[1].imshow(ref_features.T, aspect='auto',
                       interpolation='nearest',
                       origin='lowest')
        axes[1].set_xlabel('Time (minutes)')
        axes[1].set_ylabel('Features')
        axes[1].set_xticks(rxticks)
        axes[1].set_xticklabels(rxtick_labels)
        axes[1].set_title(_perf_name(reference_fn))
        plt.tight_layout()

        
        fig_fn = os.path.join(out_dir,
                              'features_p_{0}_r_{1}.pdf'.format(_perf_name(performance_fn),
                                                                _perf_name(reference_fn)))
        plt.savefig(fig_fn)
        plt.clf()
        plt.close()

    LOGGER.info('Computing Alignment')
    # Compute pairwise cost
    wp, D = dtw_alignment(perf_features=perf_features,
                          ref_features=ref_features,
                          metric='euclidean',
                          dtw_kwargs=dtw_kwargs)

    alignment = np.column_stack((perf_times[wp[:, 0]], ref_times[wp[:, 1]]))
    out_fn = os.path.join(out_dir,
                          'alignment_p_{0}_r_{1}.txt'.format(_perf_name(performance_fn),
                                                             _perf_name(reference_fn)))
    np.savetxt(out_fn, alignment, delimiter='\t')

    if make_plots:
        LOGGER.info('Plotting alignment')
        plt.matshow(D, aspect='auto',
                    interpolation='nearest',
                   cmap='gray',
                   origin='lowest')

        plt.plot(wp[:, 1],  wp[:, 0], label='Optimal path', color='y')

        plt.xlabel(_perf_name(reference_fn))
        plt.ylabel(_perf_name(performance_fn))
        plot_fn = os.path.join(out_dir,
                              'alignment_p_{0}_r_{1}.pdf'.format(_perf_name(performance_fn),
                                                                _perf_name(reference_fn)))
        plt.savefig(plot_fn)
        plt.clf()
        plt.close()
    

if __name__ == '__main__':

    
    parser = argparse.ArgumentParser('Align a piece')

    parser.add_argument('performance_fn', help='Audio file with the piece to be aligned')
    parser.add_argument('reference_fn', help='Audio file with the reference performance')
    parser.add_argument('out_dir', help='Directory for storing the outputs',
                        default='.')
    parser.add_argument('--no-plots', help='Do not generate plots',
                        action='store_true', default=False)

    args = parser.parse_args()

    if not os.path.exists(args.out_dir):
        os.mkdir(args.out_dir)

    main(performance_fn=args.performance_fn,
         reference_fn=args.reference_fn,
         out_dir=args.out_dir,
         make_plots=not args.no_plots)
    

    

